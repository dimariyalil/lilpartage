// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Partner {
  id                String   @id @default(cuid())
  firstName         String
  lastName          String
  email             String   @unique
  phone             String?
  country           String
  language          String   @default("ru")
  messenger         String?  // telegram, whatsapp, skype
  messengerNick     String?
  trafficSource     String?
  resourceLink      String?
  trafficVolume     String?
  login             String   @unique
  passwordHash      String
  withdrawalMethod  String?
  balance           Decimal  @default(0)
  status            PartnerStatus @default(PENDING)
  referralCode      String   @unique
  isEmailVerified   Boolean  @default(false)
  isPhoneVerified   Boolean  @default(false)
  agreedToTerms     Boolean  @default(false)
  agreedToPrivacy   Boolean  @default(false)
  agreedToNewsletter Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  players           Player[]
  clicks            Click[]
  conversions       Conversion[]
  payouts           Payout[]
  subAccounts       SubAccount[]
  notifications     Notification[]
  
  @@map("partners")
}

model Player {
  id            String   @id @default(cuid())
  partnerId     String
  email         String?
  phone         String?
  country       String?
  registeredAt  DateTime @default(now())
  firstDepositAt DateTime?
  totalDeposits Decimal  @default(0)
  totalBets     Decimal  @default(0)
  status        PlayerStatus @default(ACTIVE)
  
  // Relations
  partner       Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  conversions   Conversion[]
  
  @@map("players")
}

model Click {
  id          String   @id @default(cuid())
  partnerId   String
  subAccountId String?
  creativeId  String?
  ipAddress   String
  userAgent   String?
  referer     String?
  country     String?
  device      String?
  browser     String?
  clickedAt   DateTime @default(now())
  
  // Relations
  partner     Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  subAccount  SubAccount? @relation(fields: [subAccountId], references: [id])
  creative    Creative?   @relation(fields: [creativeId], references: [id])
  
  @@map("clicks")
}

model Conversion {
  id           String   @id @default(cuid())
  partnerId    String
  playerId     String
  type         ConversionType
  amount       Decimal?
  commission   Decimal  @default(0)
  conversionAt DateTime @default(now())
  
  // Relations
  partner      Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@map("conversions")
}

model Payout {
  id           String      @id @default(cuid())
  partnerId    String
  amount       Decimal
  method       String      // bank, crypto, ewallet
  details      Json        // payment details
  status       PayoutStatus @default(PENDING)
  requestedAt  DateTime    @default(now())
  processedAt  DateTime?
  rejectedAt   DateTime?
  rejectionReason String?
  
  // Relations
  partner      Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  @@map("payouts")
}

model SubAccount {
  id          String   @id @default(cuid())
  partnerId   String
  name        String
  description String?
  trackingId  String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  // Relations
  partner     Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  clicks      Click[]
  
  @@map("sub_accounts")
}

model Creative {
  id          String      @id @default(cuid())
  name        String
  type        CreativeType
  category    String
  language    String
  title       String?
  description String?
  imageUrl    String?
  clickUrl    String?
  size        String?     // 300x250, 728x90, etc.
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  
  // Relations
  clicks      Click[]
  
  @@map("creatives")
}

model Notification {
  id          String           @id @default(cuid())
  partnerId   String?
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  
  // Relations
  partner     Partner?         @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// Enums
enum PartnerStatus {
  PENDING
  ACTIVE
  SUSPENDED
  BLOCKED
}

enum PlayerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ConversionType {
  REGISTRATION
  FIRST_DEPOSIT
  DEPOSIT
  BET
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
  CANCELLED
}

enum CreativeType {
  BANNER
  TEXT
  EMAIL
  LANDING
  VIDEO
}

enum NotificationType {
  REGISTRATION
  PAYOUT
  COMMISSION
  SYSTEM
  PROMOTION
}